#!/usr/bin/env python
# coding: utf-8

version='1.0.0'

import io
import re
import sys
reload(sys)
sys.setdefaultencoding('utf-8')
import argparse
import polib
from operator import itemgetter

parser = argparse.ArgumentParser(description='Extract Fallout MSG from gettext PO',formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('-i', dest='input_file', help='input file', required=True)
parser.add_argument('-o', dest='output_file', help='output file')
parser.add_argument('-e', '--encoding', dest='enc', help='MSG encoding',default='cp1252')
parser.add_argument('--extract-file', dest='extract_file', help='file to extract, as recorded in PO')
args=parser.parse_args()

#init vars
input_file=args.input_file
output_file=args.output_file
extract_file=args.extract_file
enc=args.enc
if extract_file == None:
  extract_file = output_file

po = polib.pofile(input_file)

#check if extract fie is present in po, exit with error if not
present_files = {}
for entry in po:
  for eo in entry.occurrences:
    present_files[eo[0]] = 1
if not extract_file in present_files:
  print "{} is not present in {}".format(extract_file,input_file)
  print "supply one of present files with --extract-file argument:"
  for pf in present_files:
    print pf
  sys.exit(1)

voice = ''
lines = []
msg_entries = []
for entry in po:
  for eo in entry.occurrences:
    if eo[0] == extract_file:
      index = eo[1]
      if entry.msgstr == '':
        value = entry.msgid
      else:
        value = entry.msgstr
      if entry.msgctxt != None:
        voice = entry.msgctxt
      else:
        voice = ''
      msg_entries.append([int(index),voice,value])

msg_entries.sort()
for msg_entry in msg_entries:
  lines.append('{{{}}}{{{}}}{{{}}}\n'.format(msg_entry[0],msg_entry[1],msg_entry[2]))

file = io.open(output_file, 'w', encoding=enc)
for line in lines:
  file.write("%s" % unicode(line))
