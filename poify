#!/usr/bin/env python
# coding: utf-8

version='1.0.0'

import io
import os
import argparse
import sys
import polib
import shutil
import re
import os
import bgforge_po

valid_extensions = [ 'msg', 'txt', 'sve', ]

#parse args
parser = argparse.ArgumentParser(description='Poify files in selected directory',formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('-d', dest='src_dir', default='.', help='directory to poify')
parser.add_argument('-e', dest='enc', help='source encoding',default='cp1252')
parser.add_argument('--no-lowercase', dest='nolowercase', default=False, action='store_true', help="don't lowercase filenames before poifying")
parser.add_argument('-w','--width', dest='width', default='78', help='output PO wrapwith')
args=parser.parse_args()


#init vars
src_dir=args.src_dir
enc=args.enc
nolowercase=args.nolowercase
width=int(args.width)

devnull = open(os.devnull, 'w')

#prepare po dir
def prepare_po_dir(d):
  if not os.path.isdir(d):
    shutil.rmtree(d,ignore_errors=True)
    os.makedirs(d)
  tmp_dir = d + '/tmp'
  if not os.path.isdir(tmp_dir):
    shutil.rmtree(tmp_dir,ignore_errors=True)
    os.makedirs(tmp_dir)

def clean_po_dir(d):
  tmp_dir = d + '/tmp'
  shutil.rmtree(tmp_dir,ignore_errors=True)

def poify(dir): #relative path
  po_dir = bgforge_po.parent_dir(dir) + '/po'
  tmp_dir = bgforge_po.parent_dir(dir) + '/po/tmp'
  prepare_po_dir(po_dir)
  #process with po_tool
  with bgforge_po.cd(dir):
    #Final PO
    lang = bgforge_po.basename(dir)
    dst_file = po_dir + '/' + lang + '.pot'
    po = polib.POFile(wrapwidth=width)
    po.metadata = bgforge_po.metadata

    for dir_name, subdir_list, file_list in sorted(os.walk('.',topdown=False)):
      subdir_list.sort()
      file_list.sort()
      for file_name in file_list:
        full_name=os.path.join(dir_name, file_name)
        full_name=re.sub('^\./','',full_name)  #remove trailing './'
        ext=bgforge_po.get_ext(file_name)
        if ext in valid_extensions:
            po_tool=ext + '2po'
        else:
          continue

        #checked txt is indexed and if it is, process it
        if ext == 'txt':
          if bgforge_po.check_indexed(full_name):
            print "{} is indexed TXT".format(full_name)
          else:
            print "{} is TXT, but not indexed. Skipping!".format(full_name)
            continue

        print "processing {}".format(full_name)
        po2 = bgforge_po.file2po(full_name)
        for e2 in po2:
          po.append(e2)
    po = bgforge_po.po_make_unique(po)
    po.save(dst_file)

  clean_po_dir(po_dir)
  print "Processed '{}' directory with encoding {}, the result is in {}/{}.pot".format(dir,enc,po_dir,lang)

#lowercase if not disabled on cmd
if nolowercase == False:
  bgforge_po.lowercase_recursively(src_dir)

src_dir=os.path.abspath(src_dir)
with bgforge_po.cd(bgforge_po.parent_dir(src_dir)):
  poify(bgforge_po.basename(os.path.abspath(src_dir))) #keeping relative occurences in resulting po
