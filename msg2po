#!/usr/bin/env python
# coding: utf-8

version='2.0.0'

import io
import re
import sys
reload(sys)
sys.setdefaultencoding('utf-8')
import datetime
import collections
import argparse

parser = argparse.ArgumentParser(description='Convert Fallout MSG to gettext PO',formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('-i', dest='input_file', help='input file', required=True)
parser.add_argument('-o', dest='output_file', help='output file')
parser.add_argument('--encoding', dest='enc', default='utf-8', help='source encoding')
args=parser.parse_args()

#init vars
input_file=args.input_file
output_file=args.output_file
enc=args.enc


header='''#. extracted from {}
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\\n"
"Report-Msgid-Bugs-To: \\n"
"POT-Creation-Date: 1970-1-01 00:00+0000\\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n"
"Language-Team: LANGUAGE <LL@li.org>\\n"
"Language: \\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=UTF-8\\n"
"Content-Transfer-Encoding: 8bit\\n"
"X-Generator: msg2po v.{}\\n"

'''


pattern = '{(\d+)}{}{([^}]*)}'

text = io.open(input_file, 'r', encoding=enc).read()
found_entries = re.findall(pattern, text, re.DOTALL)

po_lines = []
po_lines.append(header.format(input_file,version))

skip = []
for entry in found_entries:
  index = entry[0]
  value = unicode(entry[1])
  if value == '': #skip empty entries
    print 'WARN: {} - empty value found, skipping: {{{}}}{{}}{{}}'.format(input_file,index)
    continue
  if index == '000': #skip invalid '000' entries
    print 'WARN: {} - invalid entry number found, skipping: {{000}}{{}}{{{}}}'.format(input_file,value)
    continue
  if len(skip)==0 or (len(skip)>0 and not index in skip): #if not a dupe
    index_seen = 0
    value = value.replace('\\','\\\\')
    value = value.replace('\"','\\"')
    value = value.replace('\n','\\n')
    po_lines.append('#: {}:{}\n'.format(input_file,index)) #file reference

    for entry2 in found_entries: #search dupes
      index2 = entry2[0]
      value2 = entry2[1]
      if value2 == '': #skip empty entries
        continue
      if index2 == '000': #skip invalid '000' entries
        continue

      value2 = value2.replace('\\','\\\\')
      value2 = value2.replace('\"','\\"')
      value2 = value2.replace('\n','\\n')
      if value2 == value and index2 != index: #check for duplicate values
        po_lines.append('#: {}:{}\n'.format(input_file,index2)) #next file
        skip.append(index2) #mark for skipping

      if index2 == index: #check for duplicate entry numbers
        index_seen += 1
        if index_seen > 1:
          skip.append(index2) #mark as dupe
          print 'WARN: {} - duplicate entry number found, skipping: {{{}}}{{}}{{{}}}'.format(input_file,index2,value2)

    po_lines.append('msgid "{}"\n'.format(value))
    po_lines.append('msgstr ""\n\n')

if output_file == None:
  for po_line in po_lines:
    print po_line,
else:
  with open(output_file, 'w') as po_file:
    po_file.writelines(po_lines)
  po_file.close()
