#!/usr/bin/env python
# coding: utf-8

import re
import sys
import datetime
import collections

version='1.0.0'

header='''#. extracted from {}
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\\n"
"Report-Msgid-Bugs-To: \\n"
"POT-Creation-Date: {}+0000\\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\\n"
"Language-Team: LANGUAGE <LL@li.org>\\n"
"Language: \\n"
"MIME-Version: 1.0\\n"
"Content-Type: text/plain; charset=UTF-8\\n"
"Content-Transfer-Encoding: 8bit\\n"
"X-Generator: msg2po v.{}\\n"

'''

source_file=sys.argv[1]
dest_po=sys.argv[2]

pattern = '{(\d+)}{}{([^}]*)}'

text = open(source_file, 'r').read()
found_entries = re.findall(pattern, text, re.DOTALL)

po_lines = []
now = datetime.datetime.utcnow()
now_str = "{}-{}-{} {}:{}".format(now.year, now.month, now.day, now.hour, now.minute)
po_lines.append(header.format(source_file,now_str,version))

skip = []
for entry in found_entries:
  index = entry[0]
  if len(skip)==0 or (len(skip)>0 and not index in skip): #if not a dupe
    value = entry[1].replace('\n','\\n').replace('\"','\\"')
    po_lines.append('#: {}:{}\n'.format(source_file,index)) #file reference
    for entry2 in found_entries: #search dupes
      index2 = entry2[0]
      value2 = entry2[1].replace('\n','\\n').replace('\"','\\"')
      if value2 == value and index2 != index:
        po_lines.append('#: {}:{}\n'.format(source_file,index2)) #next file
        skip.append(index2) #mark as dupe
    po_lines.append('msgid "{}"\n'.format(value))
    po_lines.append('msgstr ""\n\n')

with open(dest_po, 'w') as po_file:
  po_file.writelines(po_lines)
po_file.close()
