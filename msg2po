#!/usr/bin/env python
# coding: utf-8

version='1.0.0'

import io
import re
import sys
reload(sys)
sys.setdefaultencoding('utf-8')
import datetime
import collections
import argparse
import polib

parser = argparse.ArgumentParser(description='Convert Fallout MSG to gettext PO',formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument('-i', dest='input_file', help='input file', required=True)
parser.add_argument('-o', dest='output_file', help='output file')
parser.add_argument('-e','--encoding', dest='enc', default='cp1252', help='source encoding')
args=parser.parse_args()

#init vars
input_file=args.input_file
output_file=args.output_file
enc=args.enc

po = polib.POFile()
po.metadata = {
  'Project-Id-Version': 'PACKAGE VERSION',
  'Report-Msgid-Bugs-To': '',
  'POT-Creation-Date': '1970-1-01 00:00+0000',
  'PO-Revision-Date': 'YEAR-MO-DA HO:MI+ZONE',
  'Last-Translator': 'FULL NAME <EMAIL@ADDRESS',
  'Language-Team': 'LANGUAGE <LL@li.org>',
  'Language': '',
  'MIME-Version': '1.0',
  'Content-Type': 'text/plain; charset=UTF-8',
  'Content-Transfer-Encoding': '8bit',
  'X-Generator': 'msg2po v.{}'.format(version),
}

pattern = '{(\d+)}{([^}]*)}{([^}]*)}'

text = io.open(input_file, 'r', encoding=enc).read()
found_entries = re.findall(pattern, text, re.DOTALL)

entry_added = 0
for entry in found_entries:
  index = entry[0]
  voice = entry[1]
  value = unicode(entry[2])

  if value == '': #skip empty entries
    print 'WARN: {} - empty value found, skipping: {{{}}}{{}}{{}}'.format(input_file,index)
    continue
  if index == '000': #skip invalid '000' entries
    print 'WARN: {} - invalid entry number found, skipping: {{000}}{{}}{{{}}}'.format(input_file,value)
    continue

  #check for dupe, if found add to occurences
  current_entries = [e for e in po]
  for entry in current_entries:
    entry_added = 0
    if entry.msgid == value and entry.previous_msgctxt == voice:
      entry.occurrences.append((input_file, index))
      entry_added = 1
      break

  #not dupe, add new entry
  if entry_added == 0:
    entry = polib.POEntry(
      msgid=value,
      msgstr='',
      occurrences=[(input_file, index),],
      previous_msgctxt = voice,
    )
    po.append(entry)

if output_file == None:
  for po_line in po_lines:
    print po_line,
else:
  po.save(output_file)
